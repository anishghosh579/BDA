ex1 

mapper

import sys

for line in sys.stdin:
	line = line.strip()
	words = line.split()

	for word in words:
		print ('%s\t%s' % (word, 1)	)

reducer

import sys

current_word = None
current_count = 0

for line in sys.stdin:
	line = line.strip()
	word, count = line.split('\t', 1)
	count = int(count)
	if current_word == word:
		current_count += count
	else:
		if current_word:
			print('%s\t%s' % (current_word, current_count))
		current_count = count
		current_word = word
if current_word == word:
	print '%s\t%s' % (current_word, current_count)
	





ex2


mapper


import sys

for line in sys.stdin:
	line = line.strip()
	parts = line.split(',')

	if len(parts) >= 2:
		year = parts[0].strip()
		year = year.split("-")[0]
		temperature = parts[1].strip()
		try:
			float(temperature)
			print("%s\t%s" % (year,temperature))
		except ValueError:
			continue



reducer


import sys

current_year = None
current_year_temps = []
min_avg_temp = float('inf')
coolest_year = None

for line in sys.stdin:
	line = line.strip()
	year, temperature_str = line.split('\t')
	temperature = float(temperature_str)
	

	if current_year == year:
		current_year_temps.append(temperature)
	else:
		if current_year is not None:
			avg_temp = sum(current_year_temps) / len(current_year_temps)
			if avg_temp < min_avg_temp:
				min_avg_temp = avg_temp
				coolest_year = current_year
		current_year = year
		current_year_temps = [temperature]
if current_year is not None:
	avg_temp = sum(current_year_temps) / len(current_year_temps)
	if avg_temp < min_avg_temp:
		min_avg_temp = avg_temp
		coolest_year = current_year

if coolest_year is not None:
	print("The coolest year is: %s with an average temperature of: %s" % (coolest_year,min_avg_temp))







ex3


bloom



import sys
def h1(x):
    return (2*x+10)%300
def h2(x):
    return (10*(5*x+30))%300
def h3(x):
    return (x+4)%300

## Bloom Filter Algorithm

def bloom_filter(x,n,hash_functions):
    bit_array = [0] * (n)
    collisions = 0
    for val in x:
        for func in hash_functions:
            v = func(val)
            if not bit_array[v]:
                bit_array[v] = 1
            else :
                collisions += 1
    return bit_array,collisions

## Calculating Error Rate for all Cases
import math
def Cal_error(k,x,y):
	"""	k is the number of hash functions.
		x is the number of elements added to the filter.
		y is the number of bits in the bit array."""
	x = x + 0.0
	return (1 - math.exp(-k*y/x))**k


hash_functions = [h1,h2,h3]
elements = []
for i in sys.stdin:
	elements.append(int(i))
n = 300
bit_array,collisions = bloom_filter(elements,n,hash_functions)
print("********* Bloom Filter Results *********")
print("Bit Array  :"+" ".join(list(map(str,bit_array))))
print("No. of ones :" + str(bit_array.count(1)))
print("No. of Collisions :"+str(collisions))


x = len(elements)
y = n
print("********* Error Rate Results for all Cases *********")
for i in range(1,len(hash_functions)+1):
    print("The Error Rate for h = "+str(i)+" : " + str(Cal_error(i,x,y)))




ex5

mapper 

import sys
def main():
    for line in sys.stdin:
        parts = line.strip().split()
        if len(parts) < 1:
            continue
       
        source_page = parts[0]
        out_links = parts[1:]
       
        # Emit the source page and its adjacency list as a comma-separated string
        print(f"{source_page}\t{','.join(out_links)}")

if __name__ == "__main__":
    main()



reducer

import sys

# Total number of pages in our graph.
TOTAL_PAGES = 8.0
INITIAL_RANK = 1.0 / TOTAL_PAGES

def main():
    for line in sys.stdin:
        source_page, out_links_str = line.strip().split('\t', 1)
        print(f"{source_page}\t{INITIAL_RANK},{out_links_str}")

if __name__ == "__main__":
    main()